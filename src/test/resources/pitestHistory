4
<classHistory><id hierarchicalHash="132ec840"><classId hash="321833024"><name><name>me/rjdavis/tdd/missinginteger/MissingInteger</name></name></classId></id><coverageId>6a96297e</coverageId></classHistory>
<classHistory><id hierarchicalHash="42cb6521"><classId hash="1120625953"><name><name>me/rjdavis/tdd/equi/EquilibriumIndexTest</name></name></classId></id><coverageId>42cb6521</coverageId></classHistory>
<classHistory><id hierarchicalHash="6a96297e"><classId hash="1788225918"><name><name>me/rjdavis/tdd/missinginteger/MissingIntegerTest</name></name></classId></id><coverageId>6a96297e</coverageId></classHistory>
<classHistory><id hierarchicalHash="ecce7ceb"><classId hash="3972955371"><name><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></name></classId></id><coverageId>42cb6521</coverageId></classHistory>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>18</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenEmptyListWhenFindingEquiIndexThenReturnNegativeOne(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>22</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithOneIndexWhenFindingEquiIndexThenReturnZero(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>49</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithOneIndexWhenFindingEquiIndexThenReturnZero(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>61</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithFiveIndexesAndSecondTwoIndixesAreMaxIntAndLastTwoIndixesAreMaxIntWhenFindingEquiIndexThenReturnTwo(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>77</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithFiveIndexesAndSecondTwoIndixesAreMaxIntAndLastTwoIndixesAreMaxIntWhenFindingEquiIndexThenReturnTwo(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>29</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithFiveIndexesAndSecondTwoIndixesAreMaxIntAndLastTwoIndixesAreMaxIntWhenFindingEquiIndexThenReturnTwo(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>32</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithFiveIndexesAndSecondTwoIndixesAreMaxIntAndLastTwoIndixesAreMaxIntWhenFindingEquiIndexThenReturnTwo(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>43</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithOneIndexWhenFindingEquiIndexThenReturnZero(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>57</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithFiveIndexesAndSecondTwoIndixesAreMaxIntAndLastTwoIndixesAreMaxIntWhenFindingEquiIndexThenReturnTwo(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>18</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithOneIndexWhenFindingEquiIndexThenReturnZero(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>22</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithOneIndexWhenFindingEquiIndexThenReturnZero(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>49</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithOneIndexWhenFindingEquiIndexThenReturnZero(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>69</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithOneIndexWhenFindingEquiIndexThenReturnZero(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>73</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithOneIndexWhenFindingEquiIndexThenReturnZero(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/equi/EquilibriumIndex</name></clazz><method><name>find</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>83</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator></id><status numberOfTestsRun="0" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.equi.EquilibriumIndexTest.givenListWithThreeIndexesAndNoEquiWhenFindingEquiIndexThenReturnNegativeOne(me.rjdavis.tdd.equi.EquilibriumIndexTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/missinginteger/MissingInteger</name></clazz><method><name>solution</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>20</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator></id><status numberOfTestsRun="1" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.missinginteger.MissingIntegerTest.givenNegativeOneAndNegativeThreeWhenReturningSmallestIntThenReturnOne(me.rjdavis.tdd.missinginteger.MissingIntegerTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/missinginteger/MissingInteger</name></clazz><method><name>solution</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>26</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator></id><status numberOfTestsRun="4" status="SURVIVED"><killingTest class="org.pitest.functional.Option$None"/></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/missinginteger/MissingInteger</name></clazz><method><name>solution</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>46</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator></id><status numberOfTestsRun="1" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.missinginteger.MissingIntegerTest.givenOneAndThreeAndSixAndFourAndOneAndTwoWhenReturningSmallestIntThenReturnFive(me.rjdavis.tdd.missinginteger.MissingIntegerTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/missinginteger/MissingInteger</name></clazz><method><name>solution</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>20</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator></id><status numberOfTestsRun="2" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.missinginteger.MissingIntegerTest.givenOneAndThreeAndSixAndFourAndOneAndTwoWhenReturningSmallestIntThenReturnFive(me.rjdavis.tdd.missinginteger.MissingIntegerTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/missinginteger/MissingInteger</name></clazz><method><name>solution</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>26</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator></id><status numberOfTestsRun="2" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.missinginteger.MissingIntegerTest.givenOneAndThreeAndSixAndFourAndOneAndTwoWhenReturningSmallestIntThenReturnFive(me.rjdavis.tdd.missinginteger.MissingIntegerTest)</value></killingTest></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/missinginteger/MissingInteger</name></clazz><method><name>solution</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>43</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator></id><status numberOfTestsRun="0" status="TIMED_OUT"><killingTest class="org.pitest.functional.Option$None"/></status></result>
<result><id><location><clazz><name>me/rjdavis/tdd/missinginteger/MissingInteger</name></clazz><method><name>solution</name></method><methodDesc>([I)I</methodDesc></location><indexes><int>57</int></indexes><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator></id><status numberOfTestsRun="1" status="KILLED"><killingTest class="org.pitest.functional.Option$Some"><value class="string">me.rjdavis.tdd.missinginteger.MissingIntegerTest.givenNegativeOneAndNegativeThreeWhenReturningSmallestIntThenReturnOne(me.rjdavis.tdd.missinginteger.MissingIntegerTest)</value></killingTest></status></result>
